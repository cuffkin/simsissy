import store from '../systems/store.js';
import { validateStats, validateGameState, handleSpecialLink } from './actions.js';

class TestRunner {
  constructor() {
    this.tests = [];
    this.passed = 0;
    this.failed = 0;
  }

  addTest(name, testFunc) {
    this.tests.push({ name, testFunc });
  }

  async runAll() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    this.passed = 0;
    this.failed = 0;

    for (const test of this.tests) {
      try {
        await test.testFunc();
        console.log(`‚úÖ ${test.name}`);
        this.passed++;
      } catch (error) {
        console.error(`‚ùå ${test.name}:`, error.message);
        this.failed++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${this.passed} –ø—Ä–æ—à–ª–æ, ${this.failed} –Ω–µ –ø—Ä–æ—à–ª–æ`);
    return this.failed === 0;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
const testRunner = new TestRunner();

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
testRunner.addTest('Store - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', () => {
  const initialHealth = store.stats.health;
  store.addStat('health', 10);
  if (store.stats.health !== initialHealth + 10) {
    throw new Error('addStat –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }

  store.setStat('health', 50);
  if (store.stats.health !== 50) {
    throw new Error('setStat –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
  store.setStat('health', initialHealth);
});

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–∏
testRunner.addTest('Store - –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏', () => {
  const initialDay = store.time.day;
  const initialMinutes = store.time.minutes;

  store.tick(60); // +1 —á–∞—Å
  if (store.time.minutes !== initialMinutes + 60) {
    throw new Error('tick –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∏–Ω—É—Ç—ã');
  }

  store.tick(1380); // +23 —á–∞—Å–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
  if (store.time.day !== initialDay + 1) {
    throw new Error('tick –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å');
  }

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  store.time.day = initialDay;
  store.time.minutes = initialMinutes;
});

// –¢–µ—Å—Ç —Ä–∞–Ω–≥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
testRunner.addTest('Store - –†–∞–Ω–≥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', () => {
  store.setStat('femininity', 0);
  const rank1 = store.getStatRank('femininity');
  
  store.setStat('femininity', 50);
  const rank2 = store.getStatRank('femininity');
  
  if (rank1 === rank2) {
    throw new Error('–†–∞–Ω–≥–∏ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
  
  if (rank1 < 0 || rank1 > 4 || rank2 < 0 || rank2 > 4) {
    throw new Error('–†–∞–Ω–≥–∏ –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-4');
  }
});

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
testRunner.addTest('–í–∞–ª–∏–¥–∞—Ü–∏—è - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', () => {
  const validStats = { health: 50, energy: 80, mood: 10 };
  const invalidStats = { health: 150, energy: -20, mood: 200 };
  
  const validErrors = validateStats(validStats);
  const invalidErrors = validateStats(invalidStats);
  
  if (validErrors.length > 0) {
    throw new Error('–í–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É');
  }
  
  if (invalidErrors.length === 0) {
    throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É');
  }
});

// –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
testRunner.addTest('Store - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞', () => {
  const originalStats = { ...store.stats };
  
  // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  store.setStat('health', 25);
  store.setStat('energy', 75);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º
  store.saveGame();
  
  // –ò–∑–º–µ–Ω—è–µ–º –µ—â–µ —Ä–∞–∑
  store.setStat('health', 99);
  store.setStat('energy', 99);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º
  const loaded = store.loadGame();
  
  if (!loaded) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É');
  }
  
  if (store.stats.health !== 25 || store.stats.energy !== 75) {
    throw new Error('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏');
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  store.stats = originalStats;
});

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
testRunner.addTest('Store - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤', () => {
  const testItem = { id: 'test_item', name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç', slot: 'upper' };
  
  const initialCount = store.inventory.length;
  store.addItem(testItem);
  
  if (store.inventory.length !== initialCount + 1) {
    throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
  }
  
  store.equipItem(testItem, 'upper');
  if (store.equipped.upper !== testItem) {
    throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª—Å—è');
  }
  
  store.unequipItem('upper');
  if (store.equipped.upper !== null) {
    throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —Å–Ω—è–ª—Å—è');
  }
  
  store.removeItem('test_item');
  if (store.inventory.length !== initialCount) {
    throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–∏–ª—Å—è –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è');
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ set:
function testSetCommands() {
  const tests = [
    {
      name: 'Test basic stat setting',
      command: 'set:hygiene=100&energy=-10&next=bathroom',
      expectedStats: { hygiene: 100 },
      expectedScene: 'bathroom'
    },
    {
      name: 'Test stat adding',
      command: 'set:energy=+15&mood=+5&next=lazy_morning',
      expectedStats: { energy: 90, mood: 5 }, // Assuming starting values
      expectedScene: 'lazy_morning'
    },
    {
      name: 'Test femininity setting',
      command: 'set:femininity=+2&next=girly_shower',
      expectedStats: { femininity: 2 },
      expectedScene: 'girly_shower'
    }
  ];

  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ set:...');
  
  let passed = 0;
  let failed = 0;

  tests.forEach((test, index) => {
    console.log(`\n${index + 1}. ${test.name}`);
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const initialStats = { ...store.stats };
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      const success = handleSpecialLink(test.command, window.gameEngine);
      
      if (!success) {
        console.error('‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        failed++;
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
      let statsOk = true;
      Object.entries(test.expectedStats).forEach(([stat, expectedValue]) => {
        const actualValue = store.stats[stat];
        if (actualValue !== expectedValue) {
          console.error(`‚ùå ${stat}: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedValue}, –ø–æ–ª—É—á–µ–Ω–æ ${actualValue}`);
          statsOk = false;
        }
      });

      if (statsOk) {
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        passed++;
      } else {
        failed++;
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      failed++;
    }
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ set:`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);

  return { passed, failed };
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function testNewGameSystem() {
  console.log('üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤–æ–π –∏–≥—Ä—ã...');
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const originalStats = { ...store.stats };
    
    // –ò–∑–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    store.setStat('femininity', 50);
    store.setStat('energy', 30);
    store.setStat('hygiene', 40);
    
    console.log('üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ —Å–±—Ä–æ—Å–∞:', {
      femininity: store.stats.femininity,
      energy: store.stats.energy,
      hygiene: store.stats.hygiene
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
    const resetSuccess = store.resetToDefaults();
    
    if (!resetSuccess) {
      console.error('‚ùå –°–±—Ä–æ—Å –∏–≥—Ä—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      return false;
    }
    
    console.log('üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:', {
      femininity: store.stats.femininity,
      energy: store.stats.energy,
      hygiene: store.stats.hygiene
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã
    const defaultExpected = {
      femininity: 0,
      energy: 80,
      hygiene: 80
    };
    
    let allCorrect = true;
    Object.entries(defaultExpected).forEach(([stat, expected]) => {
      const actual = store.stats[stat];
      if (actual !== expected) {
        console.error(`‚ùå ${stat}: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${actual}`);
        allCorrect = false;
      }
    });
    
    if (allCorrect) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ü–µ–Ω
function testMissingScenes() {
  console.log('üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω...');
  
  const scenesToTest = [
    'skincare',
    'girly_shower', 
    'lazy_morning',
    'morning_thoughts',
    'deep_fantasies',
    'phone'
  ];
  
  let passed = 0;
  let failed = 0;
  
  scenesToTest.forEach(sceneId => {
    try {
      if (window.gameEngine) {
        window.gameEngine.loadScene(sceneId);
        console.log(`‚úÖ –°—Ü–µ–Ω–∞ "${sceneId}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        passed++;
      } else {
        console.error(`‚ùå gameEngine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`);
        failed++;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã "${sceneId}": ${error.message}`);
      failed++;
    }
  });
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω:`);
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  
  return { passed, failed };
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
function testSubscriptionSystem() {
  console.log('üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ store...');
  
  let callbackCalled = false;
  let receivedChange = null;
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫
    const unsubscribe = store.subscribe((change) => {
      callbackCalled = true;
      receivedChange = change;
      console.log('–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:', change);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º setStat
    store.setStat('health', 75);
    
    if (!callbackCalled) {
      throw new Error('–ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ setStat');
    }
    
    if (!receivedChange || receivedChange.property !== 'stats.health') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π property –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ setStat');
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º
    callbackCalled = false;
    receivedChange = null;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º setFlag
    store.setFlag('testFlag', 'testValue');
    
    if (!callbackCalled) {
      throw new Error('–ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ setFlag');
    }
    
    if (!receivedChange || receivedChange.property !== 'flags.testFlag') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π property –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ setFlag');
    }
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    unsubscribe();
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–ø–∏—Å–æ–∫: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function testCharacterCreationFlow() {
  console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
  
  try {
    // –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    store.resetToDefaults();
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    if (window.applyCharacterPreset) {
      window.applyCharacterPreset('nerd');
    }
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–º–µ–Ω–∏
    store.setFlag('name', 'TestPlayer');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π
    store.setFlag('pronoun', 'he');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    const name = store.getFlag('name');
    const pronoun = store.getFlag('pronoun');
    
    if (name !== 'TestPlayer') {
      throw new Error(`–ò–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å: ${name}`);
    }
    
    if (pronoun !== 'he') {
      throw new Error(`–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å: ${pronoun}`);
    }
    
    console.log('‚úÖ –ü–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–≤–∞—Ä—Ç–∏—Ä –∏ –ª–æ–∫–∞—Ü–∏–π
function testLocationSystem() {
  console.log('\nüè† === –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –õ–û–ö–ê–¶–ò–ô ===');
  
  try {
    // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω
    const scenes = ['hallway', 'bathroom_location', 'kitchen', 'room'];
    scenes.forEach(scene => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É
        console.log(`   ‚úì –°—Ü–µ–Ω–∞ ${scene} –¥–æ—Å—Ç—É–ø–Ω–∞`);
      } catch (error) {
        console.error(`   ‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã ${scene}:`, error.message);
      }
    });
    
    // –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–≤–∞—Ä—Ç–∏—Ä
    console.log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–≤–∞—Ä—Ç–∏—Ä...');
    
    if (window.store.flags) {
      // –¢–µ—Å—Ç —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
      const apartmentTypes = ['parents', 'cheap', 'decent', 'luxury', 'studio'];
      apartmentTypes.forEach(type => {
        window.store.setFlag('apartmentType', type);
        console.log(`   ‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã: ${type}`);
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É
      window.store.setFlag('apartmentType', 'parents');
    }
    
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BodySystem...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ BodySystem
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç BodySystem
      console.log('   ‚úì –ò–º–ø–æ—Ä—Ç BodySystem –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error('   ‚úó –û—à–∏–±–∫–∞ BodySystem:', error.message);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞—Ü–∏–π:', error);
  }
}

// –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
function testLocationNavigation() {
  console.log('\nüó∫Ô∏è === –¢–ï–°–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò –ú–ï–ñ–î–£ –õ–û–ö–ê–¶–ò–Ø–ú–ò ===');
  
  try {
    const navigationPaths = [
      { from: 'hallway', to: 'room', description: '–ö–æ—Ä–∏–¥–æ—Ä ‚Üí –°–ø–∞–ª—å–Ω—è' },
      { from: 'hallway', to: 'bathroom_location', description: '–ö–æ—Ä–∏–¥–æ—Ä ‚Üí –í–∞–Ω–Ω–∞—è' },
      { from: 'hallway', to: 'kitchen', description: '–ö–æ—Ä–∏–¥–æ—Ä ‚Üí –ö—É—Ö–Ω—è' },
      { from: 'bathroom_location', to: 'hallway', description: '–í–∞–Ω–Ω–∞—è ‚Üí –ö–æ—Ä–∏–¥–æ—Ä' },
      { from: 'bathroom_location', to: 'mirror', description: '–í–∞–Ω–Ω–∞—è ‚Üí –ó–µ—Ä–∫–∞–ª–æ' },
      { from: 'kitchen', to: 'hallway', description: '–ö—É—Ö–Ω—è ‚Üí –ö–æ—Ä–∏–¥–æ—Ä' }
    ];
    
    navigationPaths.forEach(path => {
      console.log(`   ‚úì ${path.description} - –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
  }
}

// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
function testBathroomActions() {
  console.log('\nüõÅ === –¢–ï–°–¢ –î–ï–ô–°–¢–í–ò–ô –í –í–ê–ù–ù–û–ô ===');
  
  try {
    const initialHygiene = window.getStat('hygiene') || 50;
    const initialEnergy = window.getStat('energy') || 50;
    
    console.log(`–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –ì–∏–≥–∏–µ–Ω–∞=${initialHygiene}, –≠–Ω–µ—Ä–≥–∏—è=${initialEnergy}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –≤–∞–Ω–Ω–æ–π
    const bathroomActions = [
      { name: '–î—É—à', hygiene: +25, energy: +5, time: 20 },
      { name: '–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤', hygiene: +10, mood: +2, time: 5 },
      { name: '–¢—É–∞–ª–µ—Ç', hygiene: +5, mood: +3, time: 5 },
      { name: '–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π', hygiene: +15, mood: +8, time: 30 }
    ];
    
    bathroomActions.forEach(action => {
      console.log(`   ‚úì ${action.name}: –≥–∏–≥–∏–µ–Ω–∞ ${action.hygiene > 0 ? '+' : ''}${action.hygiene}, –≤—Ä–µ–º—è ${action.time}–º–∏–Ω`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ –≤–∞–Ω–Ω–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –≤–∞–Ω–Ω–æ–π:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
window.runTests = async () => {
  return await testRunner.runAll();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
window.quickTest = () => {
  console.log('üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º store
    if (!store || !store.stats) {
      throw new Error('Store –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const requiredStats = ['health', 'energy', 'mood', 'femininity', 'sissification'];
    for (const stat of requiredStats) {
      if (store.stats[stat] === undefined) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stat}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    if (!store.time || store.time.day < 1) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è');
    }
    
    console.log('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.stressTest = () => {
  console.log('üí™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–¥—Ä—è–¥
    for (let i = 0; i < 1000; i++) {
      store.addStat('energy', 1);
      store.addStat('energy', -1);
      store.tick(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const errors = validateGameState({
      time: store.time,
      stats: store.stats,
      inventory: store.inventory
    });
    
    if (errors.length > 0) {
      throw new Error(`–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏: ${errors.join(', ')}`);
    }
    
    console.log('‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è:', error.message);
    return false;
  }
};

// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.testSetCommands = testSetCommands;
window.testNewGameSystem = testNewGameSystem;
window.testMissingScenes = testMissingScenes;
window.testSubscriptionSystem = testSubscriptionSystem;
window.testCharacterCreationFlow = testCharacterCreationFlow;
window.testLocationSystem = testLocationSystem;
window.testLocationNavigation = testLocationNavigation;
window.testBathroomActions = testBathroomActions;

export default testRunner; 