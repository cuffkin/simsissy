import store from '../systems/store.js';

class UIManager {
  constructor() {
    this.activeModal = null;
    this.settings = this.loadSettings();
    this.setupEventListeners();
    this.applySettings();
  }

  setupEventListeners() {
    // Main menu toggle
    const menuBtn = document.getElementById('main-menu-btn');
    const menu = document.getElementById('main-menu');
    
    if (menuBtn && menu) {
      menuBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        menu.classList.toggle('active');
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!menu.contains(e.target) && !menuBtn.contains(e.target)) {
          menu.classList.remove('active');
        }
      });
    }

    // Menu actions
    document.addEventListener('click', (e) => {
      const menuItem = e.target.closest('.dropdown-item');
      if (menuItem) {
        const action = menuItem.dataset.action;
        this.handleMenuAction(action);
        document.getElementById('main-menu').classList.remove('active');
      }
    });

    // Modal controls
    document.addEventListener('click', (e) => {
      // Close button
      if (e.target.matches('[data-close]')) {
        const modalId = e.target.dataset.close;
        this.closeModal(modalId);
      }

      // Modal overlay click
      if (e.target.matches('.modal-overlay')) {
        this.closeModal(e.target.id);
      }

      // Stats expand buttons
      if (e.target.matches('[data-stats]')) {
        const statsType = e.target.dataset.stats;
        this.showStatsModal(statsType);
      }

      // Inventory button
      if (e.target.closest('#inventory-btn')) {
        this.showInventoryModal();
      }
    });

    // Escape key to close modals
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.activeModal) {
        this.closeModal(this.activeModal);
      }
    });
  }

  handleMenuAction(action) {
    switch (action) {
      case 'new-game':
        this.startNewGame();
        break;
      case 'settings':
        this.showSettingsModal();
        break;
      case 'save':
        this.saveGame();
        break;
      case 'load':
        this.loadGame();
        break;
      case 'export':
        this.exportSave();
        break;
      case 'import':
        this.importSave();
        break;
      case 'stuck':
        this.helpStuck();
        break;
    }
  }

  showModal(modalId) {
    this.closeModal(this.activeModal); // Close any existing modal
    
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('active');
      this.activeModal = modalId;
      document.body.style.overflow = 'hidden';
    }
  }

  closeModal(modalId) {
    if (!modalId) return;
    
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('active');
      document.body.style.overflow = '';
      
      if (this.activeModal === modalId) {
        this.activeModal = null;
      }
    }
  }

  showInventoryModal() {
    this.populateInventoryModal();
    this.showModal('inventory-modal');
  }

  populateInventoryModal() {
    // Equipment slots
    const equipmentContainer = document.getElementById('modal-equipment-slots');
    const inventoryContainer = document.getElementById('modal-inventory-grid');
    
    if (equipmentContainer) {
      const slots = [
        { id: 'hair', name: '–í–æ–ª–æ—Å—ã', icon: 'üíá' },
        { id: 'upper', name: '–í–µ—Ä—Ö', icon: 'üëö' },
        { id: 'lower', name: '–ù–∏–∑', icon: 'üëñ' },
        { id: 'underwear', name: '–ë–µ–ª—å—ë', icon: 'üëô' },
        { id: 'shoes', name: '–û–±—É–≤—å', icon: 'üë†' },
        { id: 'accessories', name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', icon: 'üíç' }
      ];

      equipmentContainer.innerHTML = slots.map(slot => {
        const equipped = store.equipped[slot.id];
        const isEquipped = equipped ? 'equipped' : '';
        
        return `
          <div class="equipment-slot ${isEquipped}" data-slot="${slot.id}">
            <div class="equipment-slot-icon">${slot.icon}</div>
            <div class="equipment-slot-name">${slot.name}</div>
            ${equipped ? `<div class="equipment-item-name">${equipped.name}</div>` : ''}
          </div>
        `;
      }).join('');
    }

    // Inventory items
    if (inventoryContainer) {
      if (store.inventory.length === 0) {
        inventoryContainer.innerHTML = `
          <div style="grid-column: 1 / -1; text-align: center; color: var(--text-secondary); padding: 20px;">
            –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç
          </div>
        `;
      } else {
        inventoryContainer.innerHTML = store.inventory.map(item => `
          <div class="inventory-slot" data-item-id="${item.id}">
            <div class="inventory-item">
              <div class="inventory-item-icon">${item.icon || 'üì¶'}</div>
              <div class="inventory-item-name">${item.name}</div>
            </div>
          </div>
        `).join('');
      }
    }
  }

  showStatsModal(type) {
    this.populateStatsModal(type);
    this.showModal('stats-modal');
  }

  populateStatsModal(type) {
    const title = document.getElementById('stats-modal-title');
    const content = document.getElementById('stats-modal-content');
    
    if (!title || !content) return;

    let stats;
    let titleText;

    if (type === 'character') {
      titleText = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
      stats = [
        { id: 'health', name: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: 'üíö', description: '–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π.' },
        { id: 'energy', name: '–≠–Ω–µ—Ä–≥–∏—è', icon: '‚ö°', description: '–ó–∞–ø–∞—Å —Å–∏–ª –Ω–∞ –¥–µ–Ω—å. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–Ω–æ–º.' },
        { id: 'mood', name: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', icon: 'üòä', description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–∏.' },
        { id: 'stress', name: '–°—Ç—Ä–µ—Å—Å', icon: 'üò∞', description: '–ù–µ—Ä–≤–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ. –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å –≤—Ä–µ–¥–µ–Ω.' },
        { id: 'arousal', name: '–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ', icon: 'üî•', description: '–°–µ–∫—Å—É–∞–ª—å–Ω–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ. –í–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.' },
        { id: 'hygiene', name: '–ì–∏–≥–∏–µ–Ω–∞', icon: 'üõÅ', description: '–ß–∏—Å—Ç–æ—Ç–∞ —Ç–µ–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.' },
        { id: 'willpower', name: '–í–æ–ª—è', icon: 'üí™', description: '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—é –∏ —Å–æ–±–ª–∞–∑–Ω–∞–º.' }
      ];
    } else if (type === 'fetish') {
      titleText = '–§–µ—Ç–∏—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
      stats = [
        { id: 'femininity', name: '–ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', icon: 'üëó', description: '–í–Ω–µ—à–Ω–∏–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–µ–Ω–¥–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑.' },
        { id: 'dignity', name: '–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ', icon: 'üëë', description: '–ß—É–≤—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞.' },
        { id: 'submission', name: '–ü–æ–¥—á–∏–Ω—ë–Ω–Ω–æ—Å—Ç—å', icon: 'üîó', description: '–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø–æ–¥—á–∏–Ω–µ–Ω–∏—é.' },
        { id: 'sissification', name: '–°–∏—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', icon: 'üíÑ', description: '–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–∏—Å—Å–∏-–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.' },
        { id: 'bimbofication', name: '–ë–∏–º–±–æ-–∏–Ω–¥–µ–∫—Å', icon: 'üíã', description: '–°–º–µ–Ω–∞ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –Ω–∞ "–±–∏–º–±–æ".' },
        { id: 'analTraining', name: '–ê–Ω–∞–ª-—Ç—Ä–µ–Ω–∏–Ω–≥', icon: 'üçë', description: '–ö–æ–º—Ñ–æ—Ä—Ç –∏ —Ä–∞—Å—Ç—è–∂–∏–º–æ—Å—Ç—å.' }
      ];
    }

    title.textContent = titleText;
    
    content.innerHTML = stats.map(stat => {
      const value = Math.round(store.stats[stat.id] || 0); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
      const rank = store.getStatRank(stat.id);
      const rankNames = ['–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π', '–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'];
      
      return `
        <div class="stat-detailed">
          <div class="stat-detailed-header">
            <span class="stat-icon">${stat.icon}</span>
            <span class="stat-name">${stat.name}</span>
            <span class="stat-value">${value}</span>
          </div>
          <div class="stat-description">${stat.description}</div>
          <div class="stat-rank-info">–†–∞–Ω–≥: ${rankNames[rank]} (${rank}/4)</div>
        </div>
      `;
    }).join('');
  }

  showSettingsModal() {
    this.populateSettingsModal();
    this.showModal('settings-modal');
  }

  populateSettingsModal() {
    const content = document.getElementById('settings-modal-content');
    if (!content) return;

    content.innerHTML = `
      <div class="settings-group">
        <h3>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h3>
        
        <div class="setting-item">
          <label for="font-family">–®—Ä–∏—Ñ—Ç:</label>
          <select id="font-family">
            <option value="system">–°–∏—Å—Ç–µ–º–Ω—ã–π</option>
            <option value="serif">–° –∑–∞—Å–µ—á–∫–∞–º–∏</option>
            <option value="monospace">–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</option>
          </select>
        </div>
        
        <div class="setting-item">
          <label for="font-size">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:</label>
          <select id="font-size">
            <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
            <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
            <option value="large">–ë–æ–ª—å—à–æ–π</option>
            <option value="extra-large">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</option>
          </select>
        </div>
        
        <div class="setting-item">
          <label for="theme">–¢–µ–º–∞:</label>
          <select id="theme">
            <option value="dark">–¢—ë–º–Ω–∞—è</option>
            <option value="light">–°–≤–µ—Ç–ª–∞—è</option>
            <option value="auto">–ê–≤—Ç–æ</option>
          </select>
        </div>
      </div>
      
      <div class="settings-group">
        <h3>–ì–µ–π–º–ø–ª–µ–π</h3>
        
        <div class="setting-item">
          <label for="auto-save">
            <input type="checkbox" id="auto-save">
            –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
          </label>
        </div>
        
        <div class="setting-item">
          <label for="confirm-choices">
            <input type="checkbox" id="confirm-choices">
            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤–∞–∂–Ω—ã–µ –≤—ã–±–æ—Ä—ã
          </label>
        </div>
        
        <div class="setting-item">
          <label for="show-stats-changes">
            <input type="checkbox" id="show-stats-changes">
            –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
          </label>
        </div>
      </div>
      
      <div class="settings-group">
        <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
        
        <div class="setting-item">
          <label for="sound-effects">
            <input type="checkbox" id="sound-effects">
            –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
          </label>
        </div>
      </div>
    `;

    // Set current values
    document.getElementById('font-family').value = this.settings.fontFamily || 'system';
    document.getElementById('font-size').value = this.settings.fontSize || 'medium';
    document.getElementById('theme').value = this.settings.theme || 'dark';
    document.getElementById('auto-save').checked = this.settings.autoSave !== false;
    document.getElementById('confirm-choices').checked = this.settings.confirmChoices !== false;
    document.getElementById('show-stats-changes').checked = this.settings.showStatsChanges !== false;
    document.getElementById('sound-effects').checked = this.settings.soundEffects === true;

    // Save settings button
    document.getElementById('save-settings').onclick = () => {
      this.saveSettings();
    };
  }

  saveSettings() {
    this.settings = {
      fontFamily: document.getElementById('font-family').value,
      fontSize: document.getElementById('font-size').value,
      theme: document.getElementById('theme').value,
      autoSave: document.getElementById('auto-save').checked,
      confirmChoices: document.getElementById('confirm-choices').checked,
      showStatsChanges: document.getElementById('show-stats-changes').checked,
      soundEffects: document.getElementById('sound-effects').checked
    };

    localStorage.setItem('sls-settings', JSON.stringify(this.settings));
    this.applySettings();
    this.closeModal('settings-modal');
    
    // Show notification
    this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
  }

  loadSettings() {
    const saved = localStorage.getItem('sls-settings');
    return saved ? JSON.parse(saved) : {};
  }

  applySettings() {
    const root = document.documentElement;
    
    // Font family
    const fontMap = {
      'system': "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
      'serif': "'Times New Roman', Times, serif",
      'monospace': "'Courier New', Courier, monospace"
    };
    
    if (this.settings.fontFamily && fontMap[this.settings.fontFamily]) {
      root.style.setProperty('--font-family', fontMap[this.settings.fontFamily]);
    }
    
    // Font size
    const sizeMap = {
      'small': '0.9em',
      'medium': '1em',
      'large': '1.1em',
      'extra-large': '1.2em'
    };
    
    if (this.settings.fontSize && sizeMap[this.settings.fontSize]) {
      root.style.setProperty('--font-size-multiplier', sizeMap[this.settings.fontSize]);
    }
  }

  // Game actions
  startNewGame() {
    if (confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É? –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      store.resetToDefaults();
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      if (window.gameEngine) {
        window.gameEngine.loadScene('character_creation');
      } else {
        window.location.search = '?scene=character_creation';
      }
      
      this.showNotification('üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'success');
    }
  }

  saveGame() {
    store.saveGame();
    this.showNotification('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
  }

  loadGame() {
    if (store.loadGame()) {
      this.showNotification('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
      // Reload current scene
      window.location.reload();
    } else {
      this.showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
    }
  }

  exportSave() {
    const saveData = localStorage.getItem('sls-save');
    if (!saveData) {
      this.showNotification('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error');
      return;
    }

    const blob = new Blob([saveData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `sissy-life-sim-save-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
    
    this.showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ', 'success');
  }

  importSave() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (!file) return;
      
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const saveData = JSON.parse(e.target.result);
          localStorage.setItem('sls-save', JSON.stringify(saveData));
          this.showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ', 'success');
          
          // Ask user if they want to load it
          if (confirm('–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ?')) {
            this.loadGame();
          }
        } catch (error) {
          this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
          console.error('Import error:', error);
        }
      };
      reader.readAsText(file);
    };
    
    input.click();
  }

  helpStuck() {
    const message = `
      üÜò –ü–æ–º–æ—â—å "–Ø –∑–∞—Å—Ç—Ä—è–ª!"
      
      –ï—Å–ª–∏ –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –∏–≥—Ä–µ:
      1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
      2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dev –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ (F12):
         - debugStats() - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         - setStat('energy', 100) - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é
         - resetGame() - —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
      3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ requirements –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è: tick(60)
      
      –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ!
    `;
    
    alert(message);
  }

  showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // Style notification
    Object.assign(notification.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      background: type === 'success' ? 'var(--success-color)' : 
                  type === 'error' ? 'var(--error-color)' : 'var(--primary-color)',
      color: 'white',
      padding: '12px 20px',
      borderRadius: '8px',
      zIndex: '3000',
      opacity: '0',
      transform: 'translateY(-20px)',
      transition: 'all 0.3s ease'
    });
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.style.opacity = '1';
      notification.style.transform = 'translateY(0)';
    }, 10);
    
    // Remove after delay
    setTimeout(() => {
      notification.style.opacity = '0';
      notification.style.transform = 'translateY(-20px)';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
}

export default UIManager; 